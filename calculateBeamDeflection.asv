% Import symbolic units
units = symunit;

% Define the properties of the beam with symbolic units
P = 75000 * units.N; % Force in Newtons
l = 4 * units.in;    % Length in inches
b = (1/8) * units.in; % Width in inches
h = 3 * units.in;     % Thickness in inches 
% E = 200 * 1e9 * units.pa; % Young's modulus

% Convert all properties to SI units (meters and Pascals)
P_SI = rewrite(P, units.N);        % Convert force to Newtons
l_SI = rewrite(l, units.m);        % Convert length to meters
b_SI = rewrite(b, units.m);        % Convert width to meters
h_SI = rewrite(h, units.m);        % Convert thickness to meters
E_SI = rewrite(E, units.Pa);       % Convert Young's modulus to Pascals

% Extract numeric values in SI units
P_SI = double(separateUnits(P_SI));
l_SI = double(separateUnits(l_SI));
b_SI = double(separateUnits(b_SI));
h_SI = double(separateUnits(h_SI));
E_SI = double(separateUnits(E_SI));

% Calculate the moment of inertia I for a rectangular cross-section
I_SI = (b_SI^3 * h_SI) / 12;

% Calculate the maximum deflection using the formula
delta_max = (P_SI * l_SI^3) / (3 * E_SI * I_SI);

% Display the results
fprintf('Force (N): %.2f N\n', P_SI);
fprintf('Length (m): %.4f m\n', l_SI);
fprintf('Width (m): %.4f m\n', b_SI);
fprintf('Thickness (m): %.4f m\n', h_SI);
fprintf('Young''s Modulus (Pa): %.2e Pa\n', E_SI);
fprintf('Moment of Inertia (m^4): %.4e m^4\n', I_SI);
fprintf('Maximum Deflection: %.4e meters\n', delta_max);
